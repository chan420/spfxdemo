{"version":3,"file":"useBoolean.js","sourceRoot":"../src/","sources":["useBoolean.ts"],"names":[],"mappings":";;;IAgBA;;;;;;OAMG;IACH,SAAgB,UAAU,CAAC,YAAqB;QACxC,IAAA,iCAAgD,EAA/C,aAAK,EAAE,gBAAwC,CAAC;QACvD,IAAM,OAAO,GAAG,mCAAgB,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,EAAd,CAAc,CAAC,CAAC;QACvD,IAAM,QAAQ,GAAG,mCAAgB,CAAC,cAAM,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe,CAAC,CAAC;QACzD,OAAO;YACL,KAAK;YACL;gBACE,OAAO,SAAA;gBACP,QAAQ,UAAA;gBACR,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO;aACnC;SACF,CAAC;IACJ,CAAC;IAZD,gCAYC","sourcesContent":["import * as React from 'react';\nimport { useConstCallback } from './useConstCallback';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /**\n   * Toggle the value. If `value` is true, this will be the `setFalse` callback.\n   * If `value` is false, this will be the `setTrue` callback.\n   */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the `setTrue` and `setFalse` callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n  const setTrue = useConstCallback(() => setValue(true));\n  const setFalse = useConstCallback(() => setValue(false));\n  return [\n    value,\n    {\n      setTrue,\n      setFalse,\n      toggle: value ? setFalse : setTrue,\n    },\n  ];\n}\n"]}